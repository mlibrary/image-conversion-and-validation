#!/usr/bin/env python3
# Copyright (c) 2017 The Regents of the University of Michigan.
# All Rights Reserved. Licensed according to the terms of the Revised
# BSD License. See LICENSE.txt for details.
from argparse import ArgumentParser
from os import walk
from os.path import join
from sys import version_info

OS_ERRORS = (
    "ConnectionError",
    "BrokenPipe",
    "ConnectionAbortedError",
    "ConnectionRefusedError",
    "ConnectionResetError",
)

class Arguments:

    def __init__ (self):
        parser = ArgumentParser(description="Make backwards compatible")
        parser.add_argument("files",
                            nargs="*",
                            help="specific files to read")
        parser.add_argument("--version",
                            help="python version to run against")
        self.args = parser.parse_args()

    @property
    def version (self):
        if self.args.version is None:
            return version_info

        else:
            return tuple(int(i) for i in self.args.version.split("."))

    @property
    def files (self):
        if self.args.files:
            return self.args.files

        else:
            return self.flat_py_tree()

    def flat_py_tree (self):
        for root, directories, files in walk("falcom"):
            for filename in files:
                if filename.endswith(".py"):
                    yield join(root, filename)

class SourceFile:

    def __init__ (self, filename):
        self.filename = filename
        self.read()
        self.fix()

    def fix (self):
        if any(error in self.text for error in OS_ERRORS):
            self.replace_os_errors()

    def replace_os_errors (self):
        print("Swapping in OSErrors in {} ...".format(self.filename))
        error_iterator = ((error, "OSError") for error in OS_ERRORS)
        self.multi_replace(error_iterator)
        self.write()

    def read (self):
        with open(self.filename, "r") as f:
            self.text = f.read()

    def write (self):
        with open(self.filename, "w") as f:
            f.write(self.text)

    def multi_replace (self, duple_iterator):
        for a, b in duple_iterator:
            self.text = self.text.replace(a, b)

args = Arguments()

if args.version < (3, 3):
    for filename in args.files:
        SourceFile(filename)
