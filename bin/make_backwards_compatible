#!/usr/bin/env python3
# Copyright (c) 2017 The Regents of the University of Michigan.
# All Rights Reserved. Licensed according to the terms of the Revised
# BSD License. See LICENSE.txt for details.
from argparse import ArgumentParser
from os import walk
from os.path import join
from re import compile as re_compile, MULTILINE
from sys import version_info

class SourceFileLessThan3_3:

    os_errors = (
        "ConnectionError",
        "BrokenPipe",
        "ConnectionAbortedError",
        "ConnectionRefusedError",
        "ConnectionResetError",
    )

    re_yield_from = re_compile(r"\byield from (.*)$", MULTILINE)

    def __init__ (self, filename):
        self.filename = filename
        self.fix()

    def fix (self):
        self.read()
        if any(error in self.text for error in self.os_errors):
            self.replace_os_errors()

        yield_match = self.re_yield_from.search(self.text)
        if yield_match:
            self.text = self.text.replace("yield from ", "yield ")
            self.write()

    def replace_os_errors (self):
        print("Swapping in OSErrors in {} ...".format(self.filename))
        self.multi_replace()
        self.write()

    def read (self):
        with open(self.filename, "r") as f:
            self.text = f.read()

    def write (self):
        with open(self.filename, "w") as f:
            f.write(self.text)

    def multi_replace (self):
        for a, b in ((error, "OSError") for error in self.os_errors):
            self.text = self.text.replace(a, b)

class Arguments:

    def __init__ (self):
        self.parse_args()
        self.make_backwards_compatible_if_less_than_3_3()

    def make_backwards_compatible_if_less_than_3_3 (self):
        if self.version() < (3, 3):
            self.less_than_3_3()

    def less_than_3_3 (self):
        for filename in self.files():
            SourceFileLessThan3_3(filename)

    def parse_args (self):
        parser = ArgumentParser(description="Make backwards compatible")
        parser.add_argument("files",
                            nargs="*",
                            help="specific files to read")
        parser.add_argument("--version",
                            help="python version to run against")
        self.args = parser.parse_args()

    def version (self):
        if self.args.version is None:
            return version_info

        else:
            return tuple(int(i) for i in self.args.version.split("."))

    def files (self):
        if self.args.files:
            return self.args.files

        else:
            return self.flat_py_tree()

    def flat_py_tree (self):
        for root, directories, files in walk("falcom"):
            for path in (join(root, f) for f in files
                                        if f.endswith(".py")):
                yield path

args = Arguments()
